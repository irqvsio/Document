{
  "swagger": "2.0",
  "info": {
    "version": "2.0.0",
    "title": "GoShare REST API",
    "description": "GoShare REST API\nResvision:\n  - 2022/09/02:\n    Add reward promotion related api.\n      * GET /reward_promotions\n\n    Add field: reward_promotion\n      * GET /cloud_data\n\n    Add field: pocket_associated\n      * GET /users/self\n      * GET /users/payment_settings\n\n    Add field: reward_deduction\n      * GET /users/self\n      * PATCH /users/self\n      * GET /users/payment_settings\n\n    Add field: points\n      * GET /users/payment_settings\n\n    Add field: points_discount\n      * PATCH /rentals/{id}\n      * GET /hist_rentals/{id}\n      * PATCH /hist_rentals/{id}\n\n    Add field: points_expired_time\n      * GET /users/payment_settings\n\n    Add field: refund_payment_points\n      * GET /hist_rentals/{id}\n\n    Add enum: credit card type (6 = Discovery Card)\n      * GET /credit_cards\n      * GET /users/payment_settings\n\n  - 2021/11/02:\n  If scooter's asset_type is default the field will not exist.\n    Add field: asset_type\n      * GET /cities/{id}/scooters\n\n    Add field: scooter_asset_type\n      * GET /rentals\n      * POST /rentals\n      * PATCH /rentals\n  - 2021/09/06:\n    * GET /trip_bonuses\n    * POST /trip_bonuses/coupon\n    Add fields: is_coupon_redeemed, event_due_date, coupon_expiry_date\n  - 2021/09/02:\n    Add trip bonus related api.\n      * GET /trip_bonuses\n      * POST /trip_bonuses/coupon\n    Add trip bonus event into combined data response.\n  - 2021/08/31:\n       The scooter model code.\n       * 100: BX\n       * 101: BTG (KOI)\n       * 102: BMX (Dots)\n       * 103: BX (TW Corporate Premium)\n       * 104: BX (Oversea Corporate Premium)\n       * 200: FX\n       * 201: FX (TW Corporate Premium)\n       * 300: PX\n       * 400: JX\n       * 401: JX (city mix)\n"
  },
  "tags": [
    {
      "name": "AdsBanner",
      "description": "Ads Banners related APIs"
    },
    {
      "name": "Announcement",
      "description": "Announcements releate APIs"
    },
    {
      "name": "City",
      "description": "Supported city related information"
    },
    {
      "name": "Country",
      "description": "Supported country related information"
    },
    {
      "name": "Credit card",
      "description": "Credit card related APIs"
    },
    {
      "name": "Cloud Data",
      "description": "(TEST) Combine settings, config, and data for APP using"
    },
    {
      "name": "Event",
      "description": "Holiday event related APIs"
    },
    {
      "name": "GoStation",
      "description": "GoStation related APIs"
    },
    {
      "name": "Plan",
      "description": "Billing Plan related APIs"
    },
    {
      "name": "Promotion",
      "description": "Promotion related APIs"
    },
    {
      "name": "Rental",
      "description": "Rental related APIs that get rental information, request rental service and actions"
    },
    {
      "name": "Scooter",
      "description": "Scooter related information"
    },
    {
      "name": "User",
      "description": "User related APIs"
    },
    {
      "name": "Update",
      "description": "Updates related APIs"
    },
    {
      "name": "Mission",
      "description": "Mission releated APIs"
    },
    {
      "name": "ParkingLot",
      "description": "Parking Lot related APIs"
    },
    {
      "name": "CityMix"
    },
    {
      "name": "EasyWallet",
      "description": "Easy Wallet related APIs"
    },
    {
      "name": "Discount Info",
      "description": "DiscountInfo related APIs"
    },
    {
      "name": "FCM Token",
      "description": "FCM Token related APIs"
    },
    {
      "name": "Oversea Business",
      "description": "Oversea Business related APIs"
    },
    {
      "name": "Payment Request",
      "description": "Payment Request related APIs"
    },
    {
      "name": "Reward Promotion",
      "description": "Reward Promotion related APIs"
    }
  ],
  "x-types": {
    "PaymentResult": {
      "type": "integer",
      "enum": [
        2,
        1,
        0,
        -1,
        -2,
        -3
      ],
      "description": "Payment result:\n* 2: pending\n* 1: success\n* 0: card error\n* -1: unknown error\n* -2: payment service response time out\n* -3: for line pay, transaction cancel\n"
    },
    "CreditCardType": {
      "type": "integer",
      "enum": [
        1,
        2,
        3,
        4,
        5,
        6
      ],
      "description": "card type\n* 1 = VISA\n* 2 = MasterCard\n* 3 = JCB\n* 4 = Union Pay\n* 5 = AMEX\n* 6 = Discovery Card\n"
    }
  },
  "paths": {
    "/countries": {
      "get": {
        "deprecated": true,
        "tags": [
          "Country"
        ],
        "summary": "Get supported country related information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded. It will return the data in body and cache time setting info in header.\n",
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duration. Default value is 7200 (2hr for internal beta)\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Country"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cities/{id}/zones": {
      "get": {
        "deprecated": true,
        "tags": [
          "City"
        ],
        "summary": "Get the boundary data of zones per the specified city",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "description": "Set the specified city ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded. It will return the data in body and cache time setting info in header.\n",
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duration. Default value is 7200 (2hr for internal beta)\n",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ZoneResult"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cities/{id}/scooters": {
      "get": {
        "tags": [
          "City"
        ],
        "summary": "Get available rental scooter related information per the specified city. Only the scooter rental state is available, the API will return the scooter list and related info. API will NOT return the scooter info when the scooter rental state is rental or out of service.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Set the specified city ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cursor",
            "type": "string",
            "description": "Set the cursor ID and function will base on the this record to return the different data",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n",
            "schema": {
              "$ref": "#/definitions/ScooterListResult"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/scooters/{id}": {
      "get": {
        "deprecated": true,
        "tags": [
          "Scooter"
        ],
        "summary": "Get the specified scooter related information per the scooter ID when the scooter rental state is available. API will return the 403 if the scooter rental state is not available.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Set the scooter ID",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n",
            "schema": {
              "$ref": "#/definitions/Scooter"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "Not found.\nThe requested resource could not be found but may be available in the future.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/users/self": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user profile information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Update user profile information",
        "parameters": [
          {
            "in": "body",
            "name": "UserSelfInfo",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserSelfInfo"
            }
          }
        ],
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/users/payment_settings": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user payment settings",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/PaymentSettings"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/users/gov_addi_purchases": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get user gov addi purchases information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/UserGovAddiPurchases"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/ads_banners": {
      "get": {
        "deprecated": true,
        "tags": [
          "AdsBanner"
        ],
        "summary": "Get valid Ads Banners",
        "description": "",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 1800 (0.5 hr). Example: Cache-Control:max-age=1800.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/AdBannersResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/city_mix/rentlas": {
      "post": {
        "tags": [
          "CityMix"
        ],
        "summary": "Meet gogoro test ride. Request to start the rental process and create a rental record; The first step of rental process is reservation.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "rental_create",
            "required": true,
            "description": "Set the rental_create object which includes the scooter ID info in the body",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string",
                  "example": "fj3a8jp0HMxZQLf5LOfHH022re1b0j4P"
                },
                "corporate_type": {
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ],
                  "description": "Corporate type:\n* 0: None\n* 1: Basic\n",
                  "example": 0
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "$ref": "#/definitions/RentalReservation"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden: User can't continue the rental operation fue to some reason, ex, no qualified driving license",
            "schema": {
              "type": "integer"
            }
          },
          "409": {
            "description": "Conflict: There are some problem (for example, outstanding payment , credit card error, or ...)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100100,
                    100101,
                    100102,
                    100103,
                    100105,
                    100106,
                    100108,
                    100109,
                    100110,
                    100111,
                    100113,
                    100114,
                    100115,
                    100116
                  ],
                  "description": "* 100100: the user doesn't bind credit crad\n* 100101: there is a outstanding payment for the user\n* 100102: the scooter is disconnected\n* 100103: there is no scooter information in database\n* 100105: the scooter is rented by the other user\n* 100106: the DL category is not matched, for example, the user with DL category = 輕型機車 reserves a BX scooter\n* 100108: there is a pending payment for the user\n* 100109: remaining quota is not enough\n* 100110: contract not valid\n* 100111: invalid corporate account\n* 100113: (scan & go) with VIP scooter but incorrect corp type (!=2)\n* 100114: (scan & go) with free floating/dots scooter but incorrect corp type (!=0 && !=1)\n* 100115: vip scooter not match user corporate id\n* 100116: delay apple pay prime upload fail\n",
                  "example": 100101
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests: The user tries to reserve with too many times.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100107
                  ],
                  "description": "* 100107: the reserve time over rate limit\n",
                  "example": 100107
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/rentals": {
      "get": {
        "tags": [
          "Rental"
        ],
        "summary": "When the app is activated, app should call this API to get the latest rental info and update the local cache/database. If APP is on the foreground, server will send notification message to update the rental info.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalInfo"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Rental"
        ],
        "summary": "Request to start the rental process and create a rental record; The first step of rental process is reservation.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "rental_create",
            "required": true,
            "description": "Set the rental_create object which includes the scooter ID info in the body",
            "schema": {
              "type": "object",
              "properties": {
                "scooter_id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "6a641f08-706e-489d-8f5a-6f8e1b16b023"
                },
                "plate": {
                  "type": "string",
                  "example": "ABC-9527"
                },
                "source": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "* 0: Reserve from Mobile\n* 1: Reserve from QR Code\n* 2: Reserve from nfc\n"
                },
                "corporate_type": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n",
                  "example": 0
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "$ref": "#/definitions/RentalReservation"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden: User can't continue the rental operation fue to some reason, ex, no qualified driving license",
            "schema": {
              "type": "integer"
            }
          },
          "409": {
            "description": "Conflict: There are some problem (for example, outstanding payment , credit card error, or ...)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100100,
                    100101,
                    100102,
                    100103,
                    100104,
                    100105,
                    100106,
                    100108,
                    100109,
                    100110,
                    100111,
                    100113,
                    100114,
                    100115,
                    100116,
                    100121,
                    100122
                  ],
                  "description": "* 100100: the user doesn't bind credit crad\n* 100101: there is a outstanding payment for the user\n* 100102: the scooter is disconnected\n* 100103: there is no scooter information in database\n* 100104: the scooter is offline\n* 100105: the scooter is rented by the other user\n* 100106: the DL category is not matched, for example, the user with DL category = 輕型機車 reserves a BX scooter\n* 100108: there is a pending payment for the user\n* 100109: remaining quota is not enough\n* 100110: contract not valid\n* 100111: invalid corporate account\n* 100113: (scan & go) with VIP scooter but incorrect corp type (!=2)\n* 100114: (scan & go) with free floating/dots scooter but incorrect corp type (!=0 && !=1)\n* 100115: vip scooter not match user corporate id\n* 100116: delay apple pay prime upload fail\n* 100121: there are expired payment requests for the user\n* 100122: The user has been suspended from starting a new rental.\n",
                  "example": 100101
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests: The user tries to reserve with too many times.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100107
                  ],
                  "description": "* 100107: the reserve time over rate limit\n",
                  "example": 100107
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/rentals/{id}": {
      "patch": {
        "tags": [
          "Rental"
        ],
        "summary": "Request to do the rental related actions: cancel, beep, ride, park, open trunk, return scooter.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Set the rental ID",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "rental_patch_req",
            "required": true,
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    8,
                    9,
                    10
                  ],
                  "description": "* 0: cancel\n* 1: beep\n* 2: ride\n* 3: park\n* 4: open_trunk\n* 5: return\n* 8: find_scooter_by_horn\n* 9: in_parking\n* 10: out_parking\n"
                },
                "membership_type": {
                  "type": "integer",
                  "description": "User membership type which mobile service uses to query corresponding plan and calculate fee for this rental"
                },
                "payment_method": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2,
                    3,
                    4
                  ],
                  "description": "* 0: credit card\n* 1: line pay\n* 2: apple pay\n* 3: delay apple pay\n* 4: delay apple pay instant auth\n"
                },
                "payment_line_pay_prime": {
                  "type": "string",
                  "description": "For line pay, the client should send prime for payment"
                },
                "prime": {
                  "type": "string",
                  "description": "For line pay, apple pay, delay auth, the client should send prime for payment"
                },
                "enable_warning_zone_checking": {
                  "type": "boolean"
                },
                "enable_extra_zone_checking": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ],
                    "description": "* 1: warning zone checking\n* 2: time-limited parking zone checking\n"
                  }
                },
                "card_type": {
                  "type": "integer",
                  "enum": [
                    1,
                    2,
                    3,
                    4,
                    5
                  ],
                  "description": "* 1: VISA\n* 2: MasterCard\n* 3: JCB\n* 4: Union Pay\n* 5: AMEX\n"
                },
                "bank_id": {
                  "type": "integer",
                  "example": 822
                },
                "affiliate_codes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "warning zone checking"
                  },
                  "example": [
                    "ubear"
                  ]
                },
                "parking_code": {
                  "type": "string",
                  "description": "Parking Lot device code",
                  "example": "tbdtwNM6j4ReRlUKayo9ayQ5SHY00Q2I8Pc42b83cE/7MEvJInXVhSuYwOmN1q1ohUboiUsvrxeIWHmSuuMReO5JYmkMVNCqbSw+/ddqEzrs9yB8LQpaIfw3HkQ/K6lvnkpDAoI9sh1Io9ZJPUoVW+/h046S66ezYxSd+t+YegnXPfw32sEcGJheVQxO04+T9L11xYtC9kcwAeahqoWtyjn5D7atoRlqrrTIE7qxgZnx35YvGDq5pLczqxAzjPG2"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Rental"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden. The user corporate membership not valid",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "description": "Not Found: There is no rental information for {id}",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100000,
                    100300
                  ],
                  "description": "* 100000: There is no rental information for {id}\n* 100300: Parking device QRCode not valid\n"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: There are some problem due to the scooter status doesn't meet the criteria for this operation.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100001,
                    100002,
                    100003,
                    100004,
                    100005,
                    100109,
                    100110,
                    100111,
                    100112,
                    100113,
                    100114,
                    100116,
                    100120,
                    100200,
                    100201,
                    100202,
                    100203,
                    100301,
                    100302,
                    100303,
                    100304,
                    100305,
                    100306
                  ],
                  "description": "* 100001: Retnal user id not match\n* 100002: Rental state is not consistent, so can't operate successfully, for example, \"find scooter\" in riding state\n* 100003: the scooter trunk is opened\n* 100004: the scooter motor is on\n* 100005: the scooter trunk is closed, but batteries doesn't exist\n* 100109: remaining quota is not enough\n* 100110: contract not valid\n* 100111: invalid corporate account\n* 100112: rental corporate account does not match user corporate account\n* 100113: (scan & go) with VIP scooter but incorrect corp type (!=2)\n* 100114: (scan & go) with free floating/dots scooter but incorrect corp type (!=0 && !=1)\n* 100116: delay apple pay prime upload failed\n* 100120: time period can't use horn\n* 100200: the scooter is not in service\n* 100201: there is no battery in the scooter\n* 100202: the scooter is in warning service zone\n* 100203: the scooter is in time-limited parking zone\n* 100301: parking device QRCode expired\n* 100302: parking device QRCode action not match\n* 100303: scooter still in parking lot\n* 100304: scooter not in parking lot\n* 100305: parking lot fulled\n* 100306: leaving the parking lot but parking log id not match\n"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/hist_rentals/{id}/feedback": {
      "post": {
        "tags": [
          "Rental"
        ],
        "summary": "update historical rental feedback",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "action",
            "required": true,
            "description": "action for this specified return photo",
            "schema": {
              "type": "object",
              "properties": {
                "score": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 5
                },
                "comment": {
                  "type": "string",
                  "maximum": 500
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict: There are some problem due to the scooter status doesn't meet the criteria for this operation.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100001,
                    100002,
                    100121,
                    100122,
                    100123
                  ],
                  "description": "* 100001: Retnal user id not match\n* 100002: Rental state is not consistent, so can't operate successfully, for example, \"update return photo\" in riding state\n* 100121: rental commented successfully\n* 100122: rental comment exceed maximum length\n* 100123: exceed allow comment maximum time\n"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/hist_rentals/{id}/return_photo": {
      "patch": {
        "tags": [
          "Rental"
        ],
        "summary": "Get historical rental return photo upload link",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "action",
            "required": true,
            "description": "action for this specified return photo",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "integer",
                  "enum": [
                    0
                  ],
                  "description": "* 0: upload successfully\n"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict: There are some problem due to the scooter status doesn't meet the criteria for this operation.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100001,
                    100002,
                    100118
                  ],
                  "description": "* 100001: Retnal user id not match\n* 100002: Rental state is not consistent, so can't operate successfully, for example, \"update return photo\" in riding state\n* 100118: rental return photo uploaded successfully\n"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/hist_rentals/{id}/return_photo_upload_url": {
      "get": {
        "tags": [
          "Rental"
        ],
        "summary": "Get historical rental return photo upload link",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalReturnPhoto"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict: There are some problem due to the scooter status doesn't meet the criteria for this operation.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100002,
                    100117,
                    100118,
                    100119
                  ],
                  "description": "* 100002: Rental state is not consistent, so can't operate successfully, for example, \"get return photo upload url\" in riding state\n* 100117: exceed return photo upload maximum time\n* 100118: rental return photo uploaded successfully\n* 100119: not user's last one rental record\n"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/hist_rentals/{id}/return_photo_url": {
      "get": {
        "tags": [
          "Rental"
        ],
        "summary": "Get historical rental return photo link",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalPhoto"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict: There are some problem due to the scooter status doesn't meet the criteria for this operation.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100001
                  ],
                  "description": "* 100001: Retnal user id not match\n"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/hist_rentals": {
      "get": {
        "tags": [
          "Rental"
        ],
        "summary": "Get historical rental information for specified user in last 6 months",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "size",
            "type": "integer",
            "default": 20,
            "maximum": 100
          },
          {
            "in": "query",
            "name": "is_corporate",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "cursor",
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalHistoryCursorResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/responses/Unprocessable"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/hist_rentals/{id}": {
      "get": {
        "tags": [
          "Rental"
        ],
        "summary": "Get the rental history detail infomation",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalHistoryDetail"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "patch": {
        "tags": [
          "Rental"
        ],
        "summary": "Request to re-pay for specified rental failed to pay.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "action",
            "required": true,
            "description": "action for this specified rental: repay",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ],
                  "description": "* 0: repay\n* 1: cancel\n"
                },
                "fraud_id": {
                  "type": "string"
                },
                "payment_method": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2,
                    4
                  ],
                  "description": "* 0: credit card\n* 1: line pay\n* 2: apple pay\n* 4: delay apple pay instant auth\n"
                },
                "payment_line_pay_prime": {
                  "type": "string",
                  "description": "For line pay, the client should send prime for payment"
                },
                "prime": {
                  "type": "string",
                  "description": "For line pay, apple pay, delay auth, the client should send prime for payment"
                },
                "card_type": {
                  "type": "integer",
                  "enum": [
                    1,
                    2,
                    3,
                    4,
                    5
                  ],
                  "description": "* 1: VISA\n* 2: MasterCard\n* 3: JCB\n* 4: Union Pay\n* 5: AMEX\n"
                },
                "bank_id": {
                  "type": "integer",
                  "example": 822
                },
                "affiliate_codes": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "description": "warning zone checking"
                  },
                  "example": [
                    "ubear"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalHistoryDetail"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/promotions": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get the promotion infomation for specified user in last 6 months",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "cursor",
            "required": false,
            "type": "string",
            "description": "if cursor is null, return all avaliable_data"
          },
          {
            "in": "query",
            "name": "size",
            "required": false,
            "type": "integer",
            "description": "size of past_data\nif size is null, return all avaliable_data, past_data\n"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "object",
              "properties": {
                "data_size": {
                  "type": "integer",
                  "example": 10,
                  "description": "data size of past_data"
                },
                "next_cursor": {
                  "type": "string"
                },
                "available_data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PromotionAvailable"
                  }
                },
                "past_data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PromotionPast"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Promotion"
        ],
        "summary": "Add the promotion for the specified user",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "promo_req",
            "required": true,
            "description": "promotion code",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                }
              },
              "example": {
                "code": "GOGORO我愛你"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/PromotionAvailable"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    200000,
                    200011,
                    200012,
                    200013,
                    200014,
                    200015,
                    200022,
                    200023
                  ],
                  "description": "* 200000: The promotion code is not valid (length should >= 5)\n* 200011: The coupon has been deactivated\n* 200012: The coupon has been expired\n* 200013: The coupon has been already added\n* 200014: The coupon has been over total limit\n* 200015: The user is not allowed to use this coupon (ex, user plan is not allowed)\n* 200022: The referral code is not valid\n* 200023: The user has already applied another referral code\n"
                }
              },
              "example": {
                "code": 200010
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/promotions/referrals": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get the personal referral code and dynamic link",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SharingInfo"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    200020,
                    200021
                  ],
                  "description": "* 200020: Can't create dymanic link from firebase\n* 200021: Referral code is overuse\n"
                }
              },
              "example": {
                "code": 31
              }
            }
          }
        }
      }
    },
    "/promotions/linepay": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get the promotion information for line-pay ONLY",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/PromotionLinePay"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/promotions/dy_messages": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get the dynamic promotion message for each payment method",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/DynamicPromotionMessage"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/credit_cards": {
      "get": {
        "tags": [
          "Credit card"
        ],
        "summary": "Get credit cards with the specified user.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/CreditCard"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Credit card"
        ],
        "summary": "Bind credit card with the specified user. Set 40 seconds connection timeout due to TapPay needs 30 seconds at most to process.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "prime",
            "required": true,
            "description": "The prime string which is obtained from TapPay createToken api",
            "schema": {
              "type": "object",
              "properties": {
                "prime": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/CreditCard"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "description": "Internal Server Error with Error Code",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    0,
                    -1,
                    -2
                  ],
                  "description": "*0: card error\n*-1: unknown error\n*-2: TapPay response time out\n"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/{id}": {
      "patch": {
        "tags": [
          "Subscription"
        ],
        "summary": "edit user subscription plan",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "format": "uuid",
            "description": "The subscription id"
          },
          {
            "in": "body",
            "name": "subscription_update",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ],
                  "description": "* 0: disabel auto renew\n* 1: enable auto renew\n"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/SubscriptionInfo"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "409": {
            "description": "Somethings wrong when purchasing subscription.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    400003,
                    400004
                  ],
                  "description": "* 400003: There is no user subscription in database.\n* 400004: User subscription expired.\n"
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions": {
      "post": {
        "tags": [
          "Subscription"
        ],
        "summary": "Purchase subscription plan",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "subscription_create",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "subscription_id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "6a641f08-706e-489d-8f5a-6f8e1b16b023"
                },
                "payment_method": {
                  "type": "integer",
                  "enum": [
                    0
                  ],
                  "description": "* 0: credit card\n"
                },
                "enable_auto_renew": {
                  "type": "boolean",
                  "default": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/PurchaseSubscriptionResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "409": {
            "description": "Somethings wrong when purchasing subscription.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    400001,
                    400002,
                    400005
                  ],
                  "description": "* 400001: There is no subscription plan in database.\n* 400002: User haved valid subscription.\n* 400005: Subsctiption plan not valid.\n"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Subscription"
        ],
        "summary": "Get the subscription plan infomation",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SubscriptionInfo"
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/business": {
      "get": {
        "tags": [
          "Business"
        ],
        "summary": "Get business detail information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/BusinessInfo"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict: There are some problem (corporate membership not valid, not valid allowance plan)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    400000
                  ],
                  "description": "* 400000: invalid corporate account\n",
                  "example": 400000
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/business/remaining_quota": {
      "get": {
        "tags": [
          "Business"
        ],
        "summary": "Get allowance remaining quota information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RemainQuotaInfo"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "409": {
            "description": "Conflict: There are some problem (not valid allowance plan)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    400000,
                    400001
                  ],
                  "description": "* 400000: invalid corporate account\n* 400001: contract not valid\n",
                  "example": 400001
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/vms": {
      "get": {
        "tags": [
          "GoStation"
        ],
        "summary": "Get VM information.",
        "description": "",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 43200 (12 hr). Example: Cache-Control:max-age=43200.",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VM"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/plans": {
      "get": {
        "deprecated": true,
        "tags": [
          "Plan"
        ],
        "summary": "Get billing plan information.",
        "description": "",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/PlanCursorResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/event/anims": {
      "get": {
        "deprecated": true,
        "tags": [
          "Event"
        ],
        "summary": "Get the event information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "device_os",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/EventAnimations"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "429": {
            "description": "Too Many Requests: The user tries to get event animation with too many times.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    0
                  ],
                  "description": "* 0: the time over rate limit\n",
                  "example": 0
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/event/anims/settings": {
      "get": {
        "deprecated": true,
        "tags": [
          "Event"
        ],
        "summary": "Get the event information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/EventAnimationsSetting"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/event/anims/{id}/file_links": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Get the event information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "description": "event id",
            "required": true
          },
          {
            "in": "query",
            "name": "device_os",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/EventAnimationsFileLink"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "429": {
            "description": "Too Many Requests: The user tries to get event animation with too many times.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    0
                  ],
                  "description": "* 0: the time over rate limit\n",
                  "example": 0
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/combined_data": {
      "get": {
        "deprecated": true,
        "tags": [
          "Cloud Data"
        ],
        "summary": "Get the combined information (Updates, Announcements, Ads Banners)",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "client_type",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          },
          {
            "in": "query",
            "name": "build_number",
            "type": "number",
            "description": "Device app’s current build number (x.y.z) for example : 2.1.0",
            "required": true
          },
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/CombinedResource_1"
            },
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 1800 (30 mins). Example: Cache-Control:max-age=1800.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/combined_data/v2": {
      "get": {
        "deprecated": true,
        "tags": [
          "Cloud Data"
        ],
        "summary": "Get the combined information (Updates, Announcements, Ads Banners, Countries, Zones, Plans, Event Settings)",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "client_type",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          },
          {
            "in": "query",
            "name": "build_number",
            "type": "number",
            "description": "Device app’s current build number (x.y.z) for example : 2.1.0",
            "required": true
          },
          {
            "in": "query",
            "name": "resource",
            "type": "integer",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "description": "The specified resource\n* 0: updates\n* 1: announcements\n* 2: ads_banners\n* 3: countries && zones\n* 4: plans\n* 5: event_setting\n",
            "required": false
          },
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/CombinedResourceV2_1"
            },
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 1800 (30 mins). Example: Cache-Control:max-age=1800.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/cloud_data": {
      "get": {
        "tags": [
          "Cloud Data"
        ],
        "summary": "Get the combined information (Updates, Announcements, Ads Banners, Countries, Zones, Plans, Event Settings, No parking zone message)",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "client_type",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          },
          {
            "in": "query",
            "name": "resource",
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
              ]
            },
            "description": "The specified resource\n* 0: updates\n* 1: announcements\n* 2: ads_banners\n* 3: countries && zones\n* 4: plans\n* 5: event_setting\n* 6: temp_no_parking\n",
            "required": false
          },
          {
            "in": "query",
            "name": "build_number",
            "type": "number",
            "description": "Device app’s current build number (x.y.z) for example : 2.1.0",
            "required": true
          },
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/CombinedResourceV2_1"
            },
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 1800 (30 mins). Example: Cache-Control:max-age=1800.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/updates": {
      "get": {
        "deprecated": true,
        "tags": [
          "Update"
        ],
        "summary": "Get Updates information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "client_type",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          },
          {
            "in": "query",
            "name": "build_number",
            "type": "number",
            "description": "Device app’s current build number (x.y.z) for example : 2.1.0",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Updates"
            },
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 7200 (2 hr). Example: Cache-Control:max-age=7200.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/announcements": {
      "get": {
        "deprecated": true,
        "tags": [
          "Announcement"
        ],
        "summary": "Get the Announcements information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/Messages"
            },
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 7200 (2 hr). Example: Cache-Control:max-age=7200.",
                "type": "string"
              }
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/missions": {
      "get": {
        "tags": [
          "Mission"
        ],
        "summary": "Get mission information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "type": "integer",
            "enum": [
              0,
              1,
              2
            ],
            "description": "The mission type of missions\n* 0: avaliable (mission state is online: 0 && in_progress: 1)\n* 1: complete  (mission state is achieved: 2)\n* 2: past (mission state is past: 3)\n",
            "required": true,
            "default": 0
          },
          {
            "in": "query",
            "name": "size",
            "type": "integer",
            "default": 20,
            "maximum": 100
          },
          {
            "in": "query",
            "name": "cursor",
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/MissionCursorResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/missions/{id}": {
      "patch": {
        "tags": [
          "Mission"
        ],
        "summary": "Patch user mission",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "mission id",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "action",
            "required": true,
            "description": "action for this specified rental: repay",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "integer",
                  "enum": [
                    0,
                    1
                  ],
                  "description": "* 0: create user mission\n* 1: cancel user mission\n"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "$ref": "#/definitions/Missions"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden: User can't continue the rental operation fue to some reason, ex, no qualified driving license",
            "schema": {
              "type": "integer"
            }
          },
          "409": {
            "description": "Conflict: There are some problem (for example, mission expired, user has another in progress mission, or ...)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    300100,
                    300101,
                    300102,
                    300103
                  ],
                  "description": "* 300100: Error for creating user mission, but the user has another in-progress mission\n* 300101: Error for creating user mission, but this mission is not online\n* 300102: Error for canceling user mission, but this user mission is NOT in-progress.\n* 300103: Error for creating/canceling user mission, but the user is in rental\n",
                  "example": 300103
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/parking_lots/usages": {
      "get": {
        "tags": [
          "ParkingLot"
        ],
        "summary": "Get parking lot usage information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "$ref": "#/definitions/ParkingLotUsageInfoCursorResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/parking_lots/{id}": {
      "get": {
        "tags": [
          "ParkingLot"
        ],
        "summary": "Get parking lot detail information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "parking_lot id",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "$ref": "#/definitions/ParkingLotDetail"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/easywallet": {
      "get": {
        "tags": [
          "EasyWallet"
        ],
        "summary": "Get Easy Wallet information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/GovAddiPurchases"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/easywallet/purchase": {
      "post": {
        "tags": [
          "EasyWallet"
        ],
        "summary": "Post user gov additional purcahse",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "easy_card_info",
            "required": true,
            "description": "action for this specified rental: repay",
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "gov_addi_purchase_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "payment_id": {
                  "type": "string",
                  "format": "uuid"
                },
                "pay_time": {
                  "type": "number",
                  "format": "long",
                  "example": 1618543285000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "type": "object",
              "properties": {
                "user_gov_addi_purchase_id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "409": {
            "description": "Conflict: There are some problem (for example, valid duration not correct, or ...)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    400100,
                    400101
                  ],
                  "description": "* 400100: Error for creating user gov addition purcahse, gov addi purchase id not found.\n* 400101: Error for creating user gov addition purcahse, gov addi purchase id duplicate.\n",
                  "example": 400100
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/discount_infos": {
      "get": {
        "tags": [
          "Discount Info"
        ],
        "summary": "Get Discount Info related information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/DiscountInfo"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/fcm_tokens": {
      "post": {
        "tags": [
          "FCM Token"
        ],
        "summary": "Subscribe new FCM token with client type and user.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "fcm_info",
            "required": true,
            "description": "fcm token and client type",
            "schema": {
              "$ref": "#/definitions/FcmInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n"
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    1000
                  ],
                  "description": "* 1000: fcm_info not defined\n"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "FCM Token"
        ],
        "summary": "Subscribe new FCM token with client type and user.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "fcm_info",
            "required": true,
            "description": "fcm token and client type",
            "schema": {
              "$ref": "#/definitions/FcmInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n"
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    1000
                  ],
                  "description": "* 1000: fcm_info not defined\n"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    4030
                  ],
                  "description": "* 4030: try to delete other's token\n"
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe requested resource could not be found but may be available in the future.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    2000
                  ],
                  "description": "* 2000: fcm token not exists\n"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/biz/cities/{id}/scooters": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get available rental scooter related information per the specified city. Only the scooter rental state is available, the API will return the scooter list and related info. API will NOT return the scooter info when the scooter rental state is rental or out of service.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Set the specified city ID",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "cursor",
            "type": "string",
            "description": "Set the cursor ID and function will base on the this record to return the different data",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n",
            "schema": {
              "$ref": "#/definitions/ScooterListResult"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/biz/cloud_data": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get the combined information (Updates, Countries, Zones, Plans)",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "client_type",
            "type": "integer",
            "description": "0 for iOS, 1 for Android",
            "required": true
          },
          {
            "in": "query",
            "name": "resource",
            "type": "array",
            "items": {
              "type": "integer",
              "enum": [
                0,
                3,
                4
              ]
            },
            "description": "The specified resource\n* 0: updates\n* 2: ads_banners\n* 3: countries && zones\n* 4: plans\n",
            "required": false
          },
          {
            "in": "query",
            "name": "build_number",
            "type": "number",
            "description": "Device app’s current build number (x.y.z) for example : 2.1.0",
            "required": true
          },
          {
            "in": "header",
            "name": "Accept-Language",
            "description": "Set the preferred display language code that was defined by RFC (BCP47)\nhttp://userguide.icu-project.org/locale\n",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/OverseaCombinedResource"
            },
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 1800 (30 mins). Example: Cache-Control:max-age=1800.",
                "type": "string"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/vms": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get VM information.",
        "description": "",
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Accept-Language",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "headers": {
              "Cache-Control": {
                "description": "Return the cache time setting; Client can refer this value as the refresh data duratio. Default value is 43200 (12 hr). Example: Cache-Control:max-age=43200.",
                "type": "string"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VM"
              }
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/rentals": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "When the app is activated, app should call this API to get the latest rental info and update the local cache/database. If APP is on the foreground, server will send notification message to update the rental info.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/OverseaRentalInfo"
            }
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Request to start the rental process and create a rental record; The first step of rental process is reservation.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "rental_create",
            "required": true,
            "description": "Set the rental_create object which includes the scooter ID info in the body",
            "schema": {
              "type": "object",
              "properties": {
                "scooter_id": {
                  "type": "string",
                  "format": "uuid",
                  "example": "6a641f08-706e-489d-8f5a-6f8e1b16b023"
                },
                "plate": {
                  "type": "string",
                  "example": "ABC-9527"
                },
                "source": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "* 0: Reserve from Mobile\n* 1: Reserve from QR Code\n* 2: Reserve from nfc\n"
                },
                "corporate_type": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2
                  ],
                  "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n",
                  "example": 0
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created. The request has been fulfilled, resulting in the creation of a new resource. It will return the data in body.",
            "schema": {
              "$ref": "#/definitions/OverseaRentalReservation"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden: User can't continue the rental operation fue to some reason, ex, no qualified driving license",
            "schema": {
              "type": "integer"
            }
          },
          "409": {
            "description": "Conflict: There are some problem (for example, outstanding payment , credit card error, or ...)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100102,
                    100103,
                    100104,
                    100105,
                    100106,
                    100110,
                    100111,
                    100113,
                    100114,
                    100115
                  ],
                  "description": "* 100102: the scooter is disconnected\n* 100103: there is no scooter information in database\n* 100104: the scooter is offline\n* 100105: the scooter is rented by the other user\n* 100110: contract not valid\n* 100111: invalid corporate account\n* 100113: (scan & go) with VIP scooter but incorrect corp type (!=2)\n* 100114: (scan & go) with free floating/dots scooter but incorrect corp type (!=0 && !=1)\n* 100115: vip scooter not match user corporate id\n",
                  "example": 100101
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests: The user tries to reserve with too many times.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100107
                  ],
                  "description": "* 100107: the reserve time over rate limit\n",
                  "example": 100107
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/rentals/{id}": {
      "patch": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Request to do the rental related actions: cancel, beep, ride, park, open trunk, return scooter.",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "Set the rental ID",
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "rental_patch_req",
            "required": true,
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "action": {
                  "type": "integer",
                  "enum": [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    8
                  ],
                  "description": "* 0: cancel\n* 1: beep\n* 2: ride\n* 3: park\n* 4: open_trunk\n* 5: return\n* 8: find_scooter_by_horn\n"
                },
                "membership_type": {
                  "type": "integer",
                  "description": "User membership type which mobile service uses to query corresponding plan and calculate fee for this rental"
                },
                "enable_warning_zone_checking": {
                  "type": "boolean"
                },
                "enable_extra_zone_checking": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "enum": [
                      1,
                      2
                    ],
                    "description": "* 1: warning zone checking\n* 2: time-limited parking zone checking\n"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/OverseaRental"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "description": "Forbidden. The user corporate membership not valid",
            "schema": {
              "type": "integer"
            }
          },
          "404": {
            "description": "Not Found: There is no rental information for {id}",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100000
                  ],
                  "description": "* 100000: There is no rental information for {id}\n"
                }
              }
            }
          },
          "409": {
            "description": "Conflict: There are some problem due to the scooter status doesn't meet the criteria for this operation.",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    100001,
                    100002,
                    100003,
                    100004,
                    100005,
                    100109,
                    100110,
                    100111,
                    100112,
                    100113,
                    100114,
                    100120,
                    100200,
                    100201,
                    100202,
                    100203
                  ],
                  "description": "* 100001: Retnal user id not match\n* 100002: Rental state is not consistent, so can't operate successfully, for example, \"find scooter\" in riding state\n* 100003: the scooter trunk is opened\n* 100004: the scooter motor is on\n* 100005: the scooter trunk is closed, but batteries doesn't exist\n* 100110: contract not valid\n* 100111: invalid corporate account\n* 100112: rental corporate account does not match user corporate account\n* 100113: (scan & go) with VIP scooter but incorrect corp type (!=2)\n* 100114: (scan & go) with free floating/dots scooter but incorrect corp type (!=0 && !=1)\n* 100120: time period can't use horn\n* 100200: the scooter is not in service\n* 100201: there is no battery in the scooter\n* 100202: the scooter is in warning service zone\n* 100203: the scooter is in time-limited parking zone\n"
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/hist_rentals": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get historical rental information for specified user in last 6 months",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "size",
            "type": "integer",
            "default": 20,
            "maximum": 100
          },
          {
            "in": "query",
            "name": "is_corporate",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "cursor",
            "type": "string",
            "format": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/RentalHistoryCursorResult"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/responses/Unprocessable"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/hist_rentals/{id}": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get the rental history detail infomation",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "rental id",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/OverseaRentalHistoryDetail"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/users/self": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get user profile information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/OverseaUser"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/business": {
      "get": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Get business detail information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/OverseaBusinessInfo"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "409": {
            "description": "Conflict: There are some problem (corporate membership not valid)",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    400000
                  ],
                  "description": "* 400000: invalid corporate account\n",
                  "example": 400000
                }
              }
            }
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/biz/fcm_tokens": {
      "post": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Subscribe new FCM token with client type and user.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "fcm_info",
            "required": true,
            "description": "fcm token and client type",
            "schema": {
              "$ref": "#/definitions/FcmInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n"
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    1000
                  ],
                  "description": "* 1000: fcm_info not defined\n"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Oversea Business"
        ],
        "summary": "Subscribe new FCM token with client type and user.\n",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "fcm_info",
            "required": true,
            "description": "fcm token and client type",
            "schema": {
              "$ref": "#/definitions/FcmInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation.\nThe request has succeeded.\n"
          },
          "400": {
            "description": "Bad request.\nThe request could not be understood by the server due to malformed syntax. The client SHOULD NOT repeat the request without modifications.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    1000
                  ],
                  "description": "* 1000: fcm_info not defined\n"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden.\nThe request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    4030
                  ],
                  "description": "* 4030: try to delete other's token\n"
                }
              }
            }
          },
          "404": {
            "description": "Not found.\nThe requested resource could not be found but may be available in the future.\n",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    2000
                  ],
                  "description": "* 2000: fcm token not exists\n"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/trip_bonuses": {
      "get": {
        "tags": [
          "Trip bonus(v2.2)"
        ],
        "description": "Get trip bonus event related information.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "User's trip bonus related information.",
            "schema": {
              "$ref": "#/definitions/TripBonus"
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n"
          },
          "404": {
            "description": "Trip bonus event not exist."
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n"
          }
        }
      }
    },
    "/trip_bonuses/coupon": {
      "post": {
        "tags": [
          "Trip bonus(v2.2)"
        ],
        "description": "Redeem trip bonus coupon.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Trip bonus coupon's related information.",
            "schema": {
              "$ref": "#/definitions/TripBonusCoupon"
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n"
          },
          "404": {
            "description": "Trip bonus event not exist."
          },
          "409": {
            "description": "Conflict: There are some problem",
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "enum": [
                    500100
                  ],
                  "description": "* 500100: Not reach redeem threshold.\n",
                  "example": 500100
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n"
          }
        }
      }
    },
    "/payment_requests": {
      "get": {
        "tags": [
          "Payment Request"
        ],
        "summary": "Get user payment request information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/UserPaymentRequest"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      },
      "post": {
        "tags": [
          "Payment Request"
        ],
        "summary": "Pay for user payment request",
        "security": [
          {
            "Bearer": []
          }
        ],
        "consumes": [
          "application/json; charset=utf-8"
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "payment_request",
            "required": true,
            "description": "action for this specified rental: repay",
            "schema": {
              "type": "object",
              "properties": {
                "expense_id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation"
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/payment_requests/{expense_id}": {
      "get": {
        "tags": [
          "Payment Request"
        ],
        "summary": "Get user payment request detail information",
        "description": "",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "expense_id",
            "required": true,
            "description": "expense id",
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Operation",
            "schema": {
              "$ref": "#/definitions/UserPaymentRequestDetail"
            }
          },
          "400": {
            "$ref": "#/responses/BadReq"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "500": {
            "$ref": "#/responses/ServerError"
          }
        }
      }
    },
    "/reward_promotions": {
      "get": {
        "tags": [
          "Reward Promotion"
        ],
        "description": "Get user's reward promotion status related information.",
        "security": [
          {
            "Bearer": []
          }
        ],
        "produces": [
          "application/json; charset=utf-8"
        ],
        "responses": {
          "200": {
            "description": "Gogoro reward promotion user status related information.",
            "schema": {
              "$ref": "#/definitions/RewardPromotion"
            }
          },
          "401": {
            "description": "Unauthorized.\nSpecifically for use when authentication is required and has failed or has not yet been provided.\n"
          },
          "404": {
            "description": "Reward promotion not exist."
          },
          "500": {
            "description": "Internal server error.\nThe server encountered an unexpected condition which prevented it from fulfilling the request.\n"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "responses": {
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "BadReq": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "ServerError": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "Forbidden": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "Unprocessable": {
      "description": "Unprocessable entity",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    }
  },
  "definitions": {
    "TripBonusCoupon": {
      "type": "object",
      "properties": {
        "is_coupon_redeemed": {
          "type": "boolean",
          "example": true
        },
        "coupon_code": {
          "description": "The trip bonus coupon code that user redeem.",
          "type": "string",
          "example": "10G90ABC12"
        },
        "expiration_time": {
          "description": "Timestamp in milliseconds of event expiration.",
          "type": "number",
          "example": 1630944000000
        },
        "redeem_value": {
          "description": "Coupon discount value.",
          "format": "double",
          "example": 900
        }
      }
    },
    "TripBonus": {
      "type": "object",
      "properties": {
        "is_coupon_redeemed": {
          "type": "boolean",
          "example": false
        },
        "trip_bonus": {
          "description": "The trip bonus.",
          "type": "number",
          "example": 900
        },
        "trip_bonus_max": {
          "description": "Trip bonus max value.",
          "type": "number",
          "example": 900
        },
        "redeem_state": {
          "type": "number",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "description": "The redeemable state, but state 0 and 1 are irredeemable.\n",
          "example": 2
        },
        "redeem_value": {
          "description": "Redeemalbe value.",
          "format": "double",
          "example": 900
        },
        "expiration_time": {
          "description": "Timestamp in milliseconds of event expiration.",
          "type": "number",
          "example": 1630944000000
        },
        "coupon_code": {
          "description": "The trip bonus coupon code that user redeem.",
          "type": "string",
          "example": "10G90ABC12"
        }
      }
    },
    "ScooterModelCode": {
      "type": "integer",
      "enum": [
        100,
        101,
        102,
        103,
        104,
        200,
        201,
        300,
        400,
        401
      ],
      "description": "The scooter model code.\n* 100: BX\n* 101: BTG (KOI)\n* 102: BMX (Dots)\n* 103: BX (TW Corporate Premium)\n* 104: BX (Oversea Corporate Premium)\n* 200: FX\n* 201: FX (TW Corporate Premium)\n* 300: PX\n* 400: JX\n* 401: JX (city mix)\n"
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        }
      }
    },
    "Country": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Country ID"
        },
        "loc_name": {
          "type": "string",
          "description": "Country name; the language depends on the language code"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the country"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the country"
        },
        "cities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/City"
          }
        }
      },
      "example": {
        "id": "eb8cd6e0-95b4-4f20-95ec-8caaa6008554",
        "loc_name": "Taiwan",
        "lat": 25.049423,
        "lng": 121.545524,
        "cities": [
          {
            "id": "ab8bb2c4-7bfa-45cc-9198-bff8998405aa",
            "loc_name": "ALL",
            "lat": 25.049423,
            "lng": 121.545524
          }
        ]
      }
    },
    "City": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "City ID"
        },
        "loc_name": {
          "type": "string",
          "description": "City name; the language depends on the language code"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the city"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the city"
        }
      },
      "example": {
        "id": "ab8bb2c4-7bfa-45cc-9198-bff8998405aa",
        "loc_name": "ALL",
        "lat": 25.049423,
        "lng": 121.545524
      }
    },
    "ZoneResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Zone"
              }
            }
          }
        }
      ]
    },
    "Zone": {
      "type": "object",
      "properties": {
        "type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5
          ],
          "description": "The service type of specified zone\n* 0: non-service zone\n* 1: service\n* 2: temp no parking\n* 3: warn\n* 4: time-limited parking\n* 5: stop only\n"
        },
        "boundary": {
          "description": "An array of boundary geocode data",
          "type": "array",
          "items": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          }
        },
        "service_id": {
          "type": "string",
          "format": "uuid"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "expired_time": {
          "type": "number",
          "format": "long",
          "description": "The zone expired time. APP should force to refresh plans once the zone expired."
        },
        "label_loc": {
          "description": "zone label location array of boundary geocode data",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "stop_loc": {
          "description": "zone stop location array of boundary geocode data",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "stop_name": {
          "type": "string"
        },
        "stop_address": {
          "type": "string"
        },
        "stop_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "description": "* 0: default\n* 1: test ride\n* 2: surf battery dog (10th gogoro anniversary)\n* 3: travel poi (10th gogoro anniversary)\n"
        },
        "stop_web_url": {
          "type": "string"
        },
        "stop_url_launch_mode": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: default\n* 1: browser\n"
        },
        "stop_note": {
          "type": "string"
        }
      },
      "example": {
        "type": 0,
        "boundary": [
          [
            121.54626488685608,
            25.049237932138116
          ],
          [
            121.54613614082336,
            25.048188197068953
          ]
        ],
        "service_type": 0,
        "service_id": "a0e866ee-141a-449a-b3bd-3324583212d1",
        "label_loc": [
          121.54626488685608,
          25.049237932138116
        ],
        "stop_loc": [
          121.54626488685608,
          25.049237932138116
        ],
        "stop_name": "新北市野柳地質公園站",
        "stop_address": "新北市萬里區港東路167-1號",
        "stop_web_url": "https://www.ridegoshare.com/",
        "stop_url_launch_mode": 0
      }
    },
    "ScooterColorCodeEnum": {
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        100
      ],
      "description": "only for vip scooter\n* 0: blue\n* 1: yellow\n* 2: red\n* 3: white\n* 4: midnight\n* 5: wasabiyellow\n* 6: seasalwhite\n* 7: ovivegrey\n* 8: darknavy\n* 100: 南山\n"
    },
    "CityZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "City ID",
          "example": "ab8bb2c4-7bfa-45cc-9198-bff8998405aa"
        },
        "loc_name": {
          "type": "string",
          "description": "City name; the language depends on the language code",
          "example": "ALL"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the city",
          "example": "25.049423"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the city",
          "example": "121.545524"
        },
        "zones": {
          "$ref": "#/definitions/ZoneResult"
        }
      }
    },
    "CountryCityZone": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "Country ID",
          "example": "eb8cd6e0-95b4-4f20-95ec-8caaa6008554"
        },
        "loc_name": {
          "type": "string",
          "description": "Country name; the language depends on the language code",
          "example": "Taiwan"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the country",
          "example": 25.049423
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the country",
          "example": 121.545524
        },
        "cities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CityZone"
          }
        }
      }
    },
    "RentalHistory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The rental ID"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "plate": {
          "description": "The scooter plate",
          "type": "string",
          "example": "MYF-2007"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "distance": {
          "type": "number",
          "format": "double",
          "description": "Riding distance (km)"
        },
        "start_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when starting the rental"
        },
        "end_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when finishing the rental"
        },
        "trip_start_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where starting the rental",
          "example": 0
        },
        "trip_start_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where starting the rental",
          "example": 0
        },
        "trip_end_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where finishing the rental",
          "example": 90
        },
        "trip_end_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where finishing the rental",
          "example": 90
        },
        "currency": {
          "description": "The currency of price",
          "type": "string",
          "example": "TWD"
        },
        "price": {
          "type": "number",
          "format": "double",
          "description": "The price which the user would pay when finishing the rental"
        },
        "payment_result": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Payment result:\n* 0: success\n* 1: fail\n* 2: pending\n"
        },
        "membership_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "membership type:\n* 0: Normal\n* 1: Corporate\n"
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        }
      },
      "example": {
        "id": "eb8cd6e0-95b4-4f20-95ec-8caaa6008554",
        "scooter_id": "575d1898-03ee-4d63-9051-77eb7ad5c744",
        "plate": "MYF-2007",
        "scooter_model_code": 100,
        "distance": 10,
        "start_time": 1552609616000,
        "end_time": 1552613216000,
        "currency": "TWD",
        "price": 99.6,
        "payment_result": 0,
        "membership_type": 0,
        "scooter_color_code": 0,
        "service_type": 0
      }
    },
    "RentalHistoryCursorResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "next_cursor": {
              "type": "string"
            },
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RentalHistory"
              }
            }
          }
        }
      ]
    },
    "Missions": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The Mission ID"
        },
        "title": {
          "type": "string",
          "description": "The Mission Title"
        },
        "web_url": {
          "type": "string",
          "description": "The Mission Web URL"
        },
        "url_launch_mode": {
          "type": "integer"
        },
        "valid_to": {
          "type": "number",
          "format": "long",
          "example": 1588204800000
        },
        "start_time": {
          "type": "number",
          "format": "long",
          "example": 1588204800000
        },
        "reward_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: Coupon\n* 1: Subscription\n"
        },
        "reward_id": {
          "type": "string",
          "format": "uuid"
        },
        "reward_title": {
          "type": "string"
        },
        "reward_discount_value": {
          "type": "integer"
        },
        "mission_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: trip_count\n* 1: trip_distance\n* 2: battery_swap_count\n"
        },
        "mission_value": {
          "type": "integer"
        },
        "state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "description": "* 0: online\n* 1: in_progress\n* 2: achieved\n* 3: past\n"
        },
        "mission_progress_value": {
          "type": "integer"
        }
      }
    },
    "MissionCursorResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Missions"
              }
            },
            "next_cursor": {
              "type": "string"
            }
          }
        }
      ]
    },
    "UserGovAddiPurchases": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The UserGovAddiPurchase ID"
        },
        "valid_from": {
          "type": "number",
          "format": "long",
          "example": 1588204800000
        },
        "valid_to": {
          "type": "number",
          "format": "long",
          "example": 1588204800000
        },
        "discount_value": {
          "type": "integer",
          "example": 20
        }
      }
    },
    "UserPaymentRequest": {
      "type": "object",
      "properties": {
        "payment_request_state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: none\n* 1: payment request\n* 2: expired\n"
        },
        "rental_detail": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RentalHistoryDetail"
            }
          ]
        },
        "expenses": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "type": {
                "type": "integer",
                "enum": [
                  0,
                  1
                ],
                "description": "* 0: 罰單\n* 1: 調度\n* 2: 維修\n* 3: 代繳\n"
              },
              "amount": {
                "type": "integer",
                "description": "The price which the user would pay",
                "example": 99
              },
              "expires": {
                "type": "number",
                "format": "long",
                "description": "The UNIX timestamp when finishing the rental",
                "example": 1588204800000
              },
              "expense_id": {
                "type": "string",
                "format": "uuid"
              },
              "is_expired": {
                "type": "boolean"
              },
              "currency": {
                "type": "string",
                "example": "TWD"
              }
            }
          }
        }
      }
    },
    "UserPaymentRequestDetail": {
      "type": "object",
      "properties": {
        "rental_detail": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RentalHistoryDetail"
            }
          ]
        },
        "expense_detail": {
          "type": "object",
          "properties": {
            "type": {
              "type": "integer",
              "enum": [
                0,
                1
              ],
              "description": "* 0: 罰單\n* 1: 調度\n* 2: 維修\n* 3: 代繳\n"
            },
            "expires": {
              "type": "number",
              "format": "long",
              "description": "The UNIX timestamp when finishing the rental",
              "example": 1588204800000
            },
            "create_time": {
              "type": "number",
              "format": "long",
              "description": "The UNIX timestamp when finishing the rental",
              "example": 1588204800000
            },
            "amount": {
              "type": "integer",
              "description": "The price which the user would pay",
              "example": 99
            },
            "is_expired": {
              "type": "boolean"
            },
            "currency": {
              "type": "string",
              "example": "TWD"
            }
          }
        }
      }
    },
    "DiscountInfo": {
      "type": "object",
      "properties": {
        "user_gov_addi_purchases": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/UserGovAddiPurchases"
            }
          ]
        },
        "businesses": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/RemainQuotaInfo"
            }
          ]
        }
      }
    },
    "GovAddiPurchases": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The GovAddiPurchase ID"
        },
        "purchase_code": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: easycard\n* 1: mengo\n"
        },
        "discount_value": {
          "type": "integer",
          "example": 20
        },
        "discount_total_trip": {
          "type": "integer",
          "example": 10
        },
        "price": {
          "type": "integer",
          "example": 100
        },
        "duratin": {
          "type": "integer",
          "example": 30
        },
        "valid_from": {
          "type": "number",
          "format": "long",
          "example": 1588204800000
        },
        "valid_to": {
          "type": "number",
          "format": "long",
          "example": 1588204800000
        }
      }
    },
    "GovAddiPurchaseResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GovAddiPurchases"
              }
            }
          }
        }
      ]
    },
    "ParkingLotUsageInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "usage": {
          "type": "integer",
          "example": 5
        },
        "remaining_usage": {
          "type": "integer",
          "example": 10
        }
      }
    },
    "ParkingLotUsageInfoCursorResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParkingLotUsageInfo"
              }
            }
          }
        }
      ]
    },
    "ParkingLotDetail": {
      "type": "object",
      "properties": {
        "usage": {
          "type": "integer",
          "example": 10
        },
        "remaining_usage": {
          "type": "integer",
          "example": 5
        },
        "images": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "https://goshare-parking-lot-innov.s3.ap-southeast-1.amazonaws.com/cbb6ed10-b893-4811-8ff6-a3e6cfaeadf0.jpg"
          ]
        },
        "scooters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Scooter"
          }
        },
        "loc": {
          "description": "Parking lot location array of boundary geocode data",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          },
          "example": [
            121.54626488685608,
            25.049237932138116
          ]
        },
        "name": {
          "type": "string",
          "description": "Parking lot name",
          "example": "台北文創大樓地下停車場"
        },
        "address": {
          "type": "string",
          "description": "Parking lot address",
          "example": "台北市信義區菸廠路88號"
        }
      }
    },
    "ScooterListResult": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "description": "Cursor ID (Base64 format). Server will provide the cursor ID for each query and client can keep this value for the further query. Example:\nNjBjNDc0MzQtN2UxZC00ZTliLTkyNTktMzQ2ZDkzMGQ3MGIxOjoxNTM4NjQyMzYwOjo5MjgxNjUwMDA=\n// decode (https://www.base64decode.org)\n60c47434-7e1d-4e9b-9259-346d930d70b1::1538642360::928165000\n* UUID\n* The number of seconds from Java epoch of 1970-01-01T00:00:00Z\n* the number of nanoseconds (from the start of the second)\n",
          "example": "NjBjNDc0MzQtN2UxZC00ZTliLTkyNTktMzQ2ZDkzMGQ3MGIxOjoxNTM4NjQyMzYwOjo5MjgxNjUwMDA="
        },
        "upsert_lst": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ScooterStatusInfo"
          },
          "description": "Arrays of scooter info list that client needs to insert these new scooters or update the scooter info.\n"
        },
        "remove_lst": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uuid"
          },
          "description": "An array of scooter IDs that client needs to remove them from local database or cache.\n",
          "example": [
            "60c47434-7e1d-4e9b-9259-346d930d70b1"
          ]
        }
      }
    },
    "PurchaseSubscriptionResult": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The user subscription id",
          "example": "123e4567-e89b-12d3-a456-426655440000"
        },
        "subscription_id": {
          "type": "string",
          "format": "uuid",
          "description": "The subscription id",
          "example": "35e6c657-e062-4abb-8e2a-9317b4ba8bef"
        },
        "payment_method": {
          "type": "integer",
          "enum": [
            0
          ],
          "description": "* 0: credit card\n",
          "example": 0
        },
        "payment_result": {
          "type": "integer",
          "enum": [
            1,
            0,
            -1,
            -2
          ],
          "description": "* 1: success\n* 0: card error\n* -1: unknown error\n* -2: payment service response time out\n",
          "example": 1
        },
        "user_plan_expired_time": {
          "type": "integer",
          "format": "long",
          "description": "The UNIX timestamp when subscription expired",
          "example": 1552609616000
        },
        "price": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "currency": {
          "type": "string",
          "example": "TWD"
        }
      }
    },
    "SubscriptionInfo": {
      "type": "object",
      "properties": {
        "subscirption_id": {
          "type": "string",
          "format": "uuid",
          "description": "The subscription id"
        },
        "valid_month": {
          "type": "integer",
          "description": "The subscription valid month"
        },
        "discount_type": {
          "type": "integer",
          "enum": [
            0
          ],
          "description": "* 0: percentage\n"
        },
        "discount_value": {
          "type": "integer",
          "description": "The subscription discount value"
        },
        "user_plan_expired_time": {
          "type": "integer",
          "format": "long",
          "description": "The UNIX timestamp when subscription expired",
          "example": 1552609616000
        },
        "user_plan_auto_renew_time": {
          "type": "integer",
          "format": "long",
          "description": "The UNIX timestamp when subscription auto renew",
          "example": 1552609616000
        },
        "price": {
          "type": "number",
          "format": "double",
          "example": 100,
          "description": "The subscription plan price"
        }
      }
    },
    "ServiceTypeEnum": {
      "type": "integer",
      "enum": [
        0,
        1,
        2
      ],
      "description": "* 0: Free Floating\n* 1: Dots\n* 2: Corporate Premium\n"
    },
    "ScooterStatusInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The Scooter ID"
        },
        "plate": {
          "type": "string",
          "description": "The license plate of scooter"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the country"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the country"
        },
        "soc_level": {
          "type": "integer",
          "description": "Current SOC level of the scooter"
        },
        "remaining_mileage": {
          "type": "number",
          "format": "double",
          "description": "Current estimated remaining mileage (km)"
        },
        "model_code": {
          "$ref": "#/definitions/ScooterModelCode"
        },
        "service_id": {
          "type": "string",
          "format": "uuid"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "parking_lot_id": {
          "type": "string",
          "format": "uuid"
        },
        "asset_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: default\n* 1: Xmas\n"
        }
      },
      "example": {
        "id": "123e4567-e89b-12d3-a456-426655440000",
        "plate": "GOO-9969",
        "lat": 25.049423,
        "lng": 121.545524,
        "soc": 95,
        "remaining_mileage": 38,
        "model_code": 200,
        "service_id": "1dedd133-efa6-4368-80c5-cfc5fa7c845a",
        "service_type": 0,
        "color_code": 0,
        "parking_lot_id": "7fc5fa0f-9d37-412b-92c8-238875b1621e",
        "asset_type": 1
      }
    },
    "Scooter": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The Scooter ID"
        },
        "plate": {
          "type": "string",
          "description": "The license plate of scooter"
        },
        "lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the country"
        },
        "lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the country"
        },
        "soc": {
          "type": "integer",
          "description": "Current SOC of the scooter (%)"
        },
        "remaining_mileage": {
          "type": "number",
          "format": "double",
          "description": "Current estimated remaining mileage (km)"
        },
        "model_code": {
          "$ref": "#/definitions/ScooterModelCode"
        },
        "service_id": {
          "type": "string",
          "format": "uuid"
        },
        "service_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: free floating\n* 1: dots\n* 2: vip\n"
        },
        "color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "parking_lot_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "example": {
        "id": "123e4567-e89b-12d3-a456-426655440000",
        "plate": "GOO-9969",
        "lat": 25.049423,
        "lng": 121.545524,
        "soc": 95,
        "remaining_mileage": 38,
        "model_code": 200,
        "service_id": "1dedd133-efa6-4368-80c5-cfc5fa7c845a",
        "service_type": 0,
        "color_code": 0,
        "parking_lot_id": "7fc5fa0f-9d37-412b-92c8-238875b1621e"
      }
    },
    "ParkWarning": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "Park warning message"
        },
        "info_url": {
          "type": "string",
          "description": "Park warning more info url"
        },
        "expired_time": {
          "type": "number",
          "format": "long"
        }
      }
    },
    "AdBanner": {
      "type": "object",
      "properties": {
        "web_url": {
          "type": "string",
          "description": "The banner URL"
        },
        "image_url": {
          "description": "The banner image URL",
          "type": "string"
        },
        "url_launch_mode": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: default\n* 1: browser\n"
        }
      },
      "example": {
        "web_url": "https://gogoro.com",
        "image_url": "https://goshare-fleet-ads-dev.s3.ap-southeast-1.amazonaws.com/ebf14215-57c8-43d3-bf5d-906cc7f92b93.png",
        "url_launch_mode": 0
      }
    },
    "ParkingLot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "loc": {
          "description": "Parking lot location array of boundary geocode data",
          "type": "array",
          "items": {
            "type": "number",
            "format": "double"
          }
        },
        "name": {
          "description": "Parking lot name",
          "type": "string"
        },
        "address": {
          "description": "Parking lot address"
        }
      },
      "example": {
        "id": "ea1f8dc4-6c44-4041-8cc0-ed8d89a31205",
        "loc": [
          121.54626488685608,
          25.049237932138116
        ],
        "name": "台北文創大樓地下停車場",
        "address": "台北市信義區菸廠路88號"
      }
    },
    "UserSelfInfo": {
      "type": "object",
      "properties": {
        "payment_method": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "payment_method:\n  * 0: credit card\n  * 1: line pay\n  * 2: apple pay\n"
        },
        "reward_deduction": {
          "type": "boolean"
        }
      },
      "example": {
        "payment_method": 0,
        "reward_deduction": true
      }
    },
    "AdBannersResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdBanner"
              }
            }
          }
        }
      ]
    },
    "RentalHistoryDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The rental ID"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "plate": {
          "description": "The scooter plate",
          "type": "string",
          "example": "MYF-2007"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "trip_start_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when starting the rental",
          "example": 1552609616000
        },
        "trip_end_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when finishing the rental",
          "example": 1552613216000
        },
        "trip_start_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where starting the rental",
          "example": 0
        },
        "trip_start_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where starting the rental",
          "example": 0
        },
        "trip_end_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where finishing the rental",
          "example": 90
        },
        "trip_end_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where finishing the rental",
          "example": 90
        },
        "distance": {
          "type": "number",
          "format": "double",
          "example": 11.1,
          "description": "Riding distance (km)"
        },
        "currency": {
          "type": "string",
          "example": "TWD",
          "description": "The currency of price"
        },
        "price": {
          "description": "The price (subtotal - discount) which the user would pay when finishing the rental",
          "type": "number",
          "format": "double",
          "example": 77
        },
        "subtotal": {
          "description": "The subtotal based on plan to calculate",
          "type": "number",
          "format": "double",
          "example": 100
        },
        "discount": {
          "description": "The discount based on auto-selected coupon for the rental",
          "type": "number",
          "format": "double",
          "example": 13
        },
        "points_discount": {
          "description": "The points deducted from the user's go-pocket wallet for the rental",
          "type": "number",
          "format": "double",
          "example": 10
        },
        "coupon_title": {
          "description": "The auto-selected coupon title",
          "type": "string",
          "example": "Chagebala的title"
        },
        "payment_method": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: credit card\n* 1: line pay\n",
          "example": 1
        },
        "payment_result": {
          "type": "integer",
          "enum": [
            2,
            1,
            0,
            -1,
            -2,
            -3
          ],
          "description": "Payment result:\n* 2: pending\n* 1: success\n* 0: card error\n* -1: unknown error\n* -2: payment service response time out\n* -3: for line pay, transaction cancel\n",
          "example": 1
        },
        "payment_card_type": {
          "type": "integer",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "description": "card type\n* 1 = VISA\n* 2 = MasterCard\n* 3 = JCB\n* 4 = Union Pay\n* 5 = AMEX\n* 6 = Discovery Card\n"
        },
        "payment_card_last_four_code": {
          "type": "string",
          "example": "5566"
        },
        "payment_line_pay_url": {
          "type": "string",
          "description": "For line pay, the client uses this url to complete payment.",
          "example": "https://line.pay/example/payment_url"
        },
        "plan_id": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Billing plan type:\n* 0: basic plan\n* 1: youth plan (user age < 24)\n"
        },
        "membership_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Membership type:\n* 0: Normal user\n* 1: Corporate\n"
        },
        "refund_payment_price": {
          "type": "number",
          "format": "double",
          "description": "The refund price",
          "example": 2
        },
        "refund_payment_points": {
          "type": "number",
          "format": "double",
          "description": "The refund points",
          "example": 2
        },
        "company": {
          "type": "string",
          "example": "gogoro"
        },
        "allowance": {
          "type": "integer",
          "example": 0
        },
        "corporate_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n",
          "example": 0
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "mercury_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "mercury_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: VISA\n* 1: CTBC\n* 2: 聯名卡驚喜價\n",
          "example": 0
        },
        "rental_photo_state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: exceed photo maximum upload time\n* 1: photo successfully uploaded\n* 2: waiting upload\n"
        },
        "subscription_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "battery_swap_count": {
          "type": "number",
          "format": "integer",
          "example": 2
        },
        "lbs_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "gov_addi_purchase_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        }
      }
    },
    "CursorResult": {
      "type": "object",
      "properties": {
        "data_size": {
          "type": "integer",
          "example": 1
        },
        "data": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "PromotionPast": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "valid_from": {
          "type": "number",
          "format": "long"
        },
        "valid_to": {
          "type": "number",
          "format": "long"
        },
        "used_time": {
          "type": "number",
          "format": "long"
        }
      },
      "example": {
        "id": "4b492fa3-fba9-43b0-95a5-b2e8092020fb",
        "title": "Goshare一生一世",
        "description": "台灣區限定，限於90天內使用。",
        "valid_from": 1556099723000,
        "valid_to": 1609286400000,
        "used_time": 1559629212601
      }
    },
    "PromotionAvailable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "valid_from": {
          "type": "number",
          "format": "long"
        },
        "valid_to": {
          "type": "number",
          "format": "long"
        }
      },
      "example": {
        "id": "a066c921-c87c-4751-97e9-444f55adc05b",
        "title": "Goshare我愛你喔",
        "description": "台灣區台北限定，限於2019/05/01至2020/04/30內使用。",
        "valid_from": 1556668800000,
        "valid_to": 1588204800000
      }
    },
    "SharingInfo": {
      "type": "object",
      "properties": {
        "referral_code": {
          "type": "string"
        },
        "dynamic_link": {
          "type": "string"
        }
      },
      "example": {
        "referral_code": "10FQ8",
        "dynamic_link": "https://gosharedev.page.link/promotions?promotion_code=10FQ8"
      }
    },
    "CreditCard": {
      "type": "object",
      "properties": {
        "id": {
          "description": "card id",
          "type": "string",
          "format": "uuid"
        },
        "type": {
          "type": "integer",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "description": "card type\n* 1 = VISA\n* 2 = MasterCard\n* 3 = JCB\n* 4 = Union Pay\n* 5 = AMEX\n* 6 = Discovery Card\n"
        },
        "last_four_code": {
          "description": "卡片後四碼",
          "type": "string"
        },
        "image_url": {
          "description": "card image url",
          "type": "string",
          "format": "url"
        },
        "is_real_card": {
          "type": "boolean"
        },
        "issuer": {
          "type": "string"
        }
      },
      "example": {
        "id": "d80bcb55-f30e-4b6e-9b66-7a879402b7d0",
        "type": 1,
        "last_four_code": "1234",
        "image_url": "http://rental.goshare.com/c1.jpg"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "credit_card_state": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: ready\n* 1: unbind\n"
        },
        "payment_state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: ok\n* 1: error\n* 2: pending\n"
        },
        "payment_method": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: credit card\n* 1: line pay\n* 2: apple pay\n"
        },
        "is_user_gov_addipurchase": {
          "type": "boolean"
        },
        "payment_request_state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: none\n* 1: payment request\n* 2: expired\n"
        },
        "pocket_associated": {
          "type": "boolean"
        },
        "reward_deduction": {
          "type": "boolean"
        }
      }
    },
    "PaymentSettings": {
      "type": "object",
      "properties": {
        "card": {
          "$ref": "#/definitions/CreditCard"
        },
        "line_pay_promotion": {
          "type": "string"
        },
        "apple_pay_promotion": {
          "type": "string"
        },
        "payment_method": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: credit card\n* 1: line pay\n"
        },
        "company": {
          "type": "string"
        },
        "is_user_gov_addipurchase": {
          "type": "boolean"
        },
        "points": {
          "type": "number",
          "format": "double"
        },
        "points_expired_time": {
          "type": "integer",
          "format": "long",
          "description": "The UNIX timestamp when reward points expired",
          "example": 1552609616000
        },
        "pocket_associated": {
          "type": "boolean"
        },
        "reward_deduction": {
          "type": "boolean"
        }
      }
    },
    "RemainQuotaInfo": {
      "type": "object",
      "properties": {
        "discount_percentage": {
          "type": "integer"
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "times_limit_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: unlimited\n* 1: day\n* 2: month\n"
        },
        "times_limit_value": {
          "type": "integer"
        },
        "trip_times_remaining_quota": {
          "type": "integer"
        }
      },
      "example": {
        "discount_percentage": 30,
        "discount_value": 20,
        "times_limit_type": 1,
        "times_limit_value": 10,
        "trip_times_remaining_quota": 2
      }
    },
    "BusinessInfo": {
      "type": "object",
      "properties": {
        "company": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "is_vip": {
          "type": "boolean"
        },
        "is_basic": {
          "type": "boolean"
        },
        "discount_percentage": {
          "type": "integer"
        },
        "discount_value": {
          "type": "number",
          "format": "double"
        },
        "times_limit_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: unlimited\n* 1: day\n* 2: month\n"
        },
        "times_limit_value": {
          "type": "integer"
        },
        "trip_times_remaining_quota": {
          "type": "integer"
        }
      },
      "example": {
        "company": "gogoro",
        "email": "user@gogoro.com",
        "is_vip": true,
        "is_basic": true,
        "discount_percentage": 30,
        "discount_value": 20,
        "times_limit_type": 1,
        "times_limit_value": 10,
        "trip_times_remaining_quota": 2
      }
    },
    "RentalReservation": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The rental ID",
          "type": "string",
          "format": "uuid"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "integer",
          "description": "The rental state will be “reserving” and no other return values for this request API at internal betastage.\n1: reserving\n// invalid values\n0: end\n2: riding\n3: parking\n4: cancel\n"
        },
        "plate": {
          "type": "string",
          "description": "The license plate of scooter"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "soc_level": {
          "type": "integer",
          "description": "Current battery energy level of the scooter"
        },
        "remaining_mileage": {
          "type": "number",
          "format": "double",
          "description": "Current estimated remaining mileage (km)"
        },
        "countdown": {
          "type": "integer",
          "description": "API will return the remaining countdown time for the countdown (second(s)) and only for the state is “reserving” stage (state = 1) at the internal beta stage. // other states will not return this value.\n"
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "is_delay_apple_pay": {
          "type": "boolean"
        },
        "mercury_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: VISA\n* 1: CTBC\n* 2: 聯名卡驚喜價\n"
        },
        "parking_lot_id": {
          "type": "string",
          "format": "uuid"
        },
        "find_scooter_pattern": {
          "$ref": "#/definitions/FindScooterPattern"
        },
        "is_user_birthday": {
          "type": "boolean"
        },
        "lbs_discount": {
          "type": "number",
          "format": "double"
        },
        "scooter_asset_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: default\n* 1: Xmas\n"
        }
      },
      "example": {
        "id": "eb8cd6e0-95b4-4f20-95ec-8caaa6008554",
        "scooter_id": "123e4567-e89b-12d3-a456-426655440000",
        "state": 1,
        "plate": "GOO-9969",
        "scooter_model_code": 100,
        "soc_level": 5,
        "remaining_mileage": 72,
        "countdown": "899 //(899 seconds = 14 mins and 59 secs)",
        "scooter_color_code": 0,
        "service_type": 0,
        "is_delay_apple_pay": false,
        "mercury_type": 0,
        "parking_lot_id": "7fc5fa0f-9d37-412b-92c8-238875b1621e",
        "find_scooter_pattern": 0,
        "is_user_birthday": false,
        "lbs_discount": 10,
        "scooter_asset_type": 1
      }
    },
    "FindScooterPattern": {
      "type": "integer",
      "enum": [
        0,
        1,
        2,
        3
      ],
      "description": "* 0: (beep)+\n* 1: (beep beep horn)+\n* 2: beep beep horn+\n* 3: (horn)+\n"
    },
    "RentalInfo": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The rental ID",
          "type": "string",
          "format": "uuid"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "plate": {
          "type": "string",
          "example": "MHK-7777"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "lat": {
          "type": "number",
          "example": 25.04926
        },
        "lng": {
          "type": "number",
          "example": 121.54562
        },
        "state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "description": "Current rental state:\n* 0: end\n* 1: reserving\n* 2: riding\n* 3: parking\n* 4: cancel\n"
        },
        "soc_level": {
          "type": "integer",
          "example": 5
        },
        "remaining_mileage": {
          "description": "Current estimated remaining mileage (km)",
          "type": "number",
          "format": "double",
          "example": 38
        },
        "countdown": {
          "type": "integer",
          "description": "Only for the state is reserving stage (state = 1), server will return the remaining countdown time for the countdown (second(s)). Other states will NOT return the countdown value.\n",
          "example": "580 (580 seconds = 9 mins and 40 secs)"
        },
        "duration": {
          "type": "integer",
          "description": "When the state is riding or parking stage (state = 2 or 3), server will return the current accumulated rental duration (second(s)). Other states will NOT return the duration value.\n",
          "example": "1228 (20 mins and 28 secs)"
        },
        "service_id": {
          "type": "string",
          "format": "uuid",
          "example": "a0e866ee-141a-449a-b3bd-3324583212d1"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "corporate_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n",
          "example": 0
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "is_delay_apple_pay": {
          "type": "boolean",
          "example": false
        },
        "mission_state": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Mission State:\n  * 0: no mission in progress\n  * 1: mission in progress\n"
        },
        "mercury_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: VISA\n* 1: CTBC\n* 2: 聯名卡驚喜價\n",
          "example": 0
        },
        "parking_lot_id": {
          "type": "string",
          "format": "uuid",
          "example": "7fc5fa0f-9d37-412b-92c8-238875b1621e"
        },
        "find_scooter_pattern": {
          "$ref": "#/definitions/FindScooterPattern"
        },
        "is_user_birthday": {
          "description": "If rental state not in reservation this value will be always false",
          "type": "boolean",
          "example": false
        },
        "scooter_asset_type": {
          "type": "integer",
          "enum": [
            0
          ],
          "description": "* 0: default\n* 1: Xmas\n"
        }
      }
    },
    "Rental": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The rental ID",
          "type": "string",
          "format": "uuid"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "description": "Current rental state:\n* 0: end\n* 1: reserving\n* 2: riding\n* 3: parking\n* 4: cancel\n"
        },
        "soc_level": {
          "type": "integer",
          "example": 5
        },
        "remaining_mileage": {
          "description": "Current estimated remaining mileage (km)",
          "type": "number",
          "format": "double",
          "example": 38
        },
        "trip_start_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when starting the rental",
          "example": 1552609616000
        },
        "trip_end_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when finishing the rental",
          "example": 1552613216000
        },
        "trip_start_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where starting the rental",
          "example": 0
        },
        "trip_start_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where starting the rental",
          "example": 0
        },
        "trip_end_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where finishing the rental",
          "example": 90
        },
        "trip_end_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where finishing the rental",
          "example": 90
        },
        "distance": {
          "description": "Riding distance (km)",
          "type": "number",
          "format": "double",
          "example": 36
        },
        "price": {
          "description": "The price (subtotal - discount) which the user would pay when finishing the rental",
          "type": "number",
          "format": "double",
          "example": 77
        },
        "subtotal": {
          "description": "The subtotal based on current plan to calculate",
          "type": "number",
          "format": "double",
          "example": 100
        },
        "discount": {
          "description": "The discount based on auto-selected coupon for the rental \n only appear when membership_type is normal",
          "type": "number",
          "format": "double",
          "example": 13
        },
        "points_discount": {
          "description": "The points deducted from the user's go-pocket wallet for the rental",
          "type": "number",
          "format": "double",
          "example": 10
        },
        "coupon_title": {
          "description": "The auto-selected coupon title \n only appear when membership_type is normal",
          "type": "string",
          "example": "Chageable的title"
        },
        "currency": {
          "description": "The currency of price",
          "type": "string",
          "example": "TWD"
        },
        "payment_method": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: credit card\n* 1: line pay\n",
          "example": 1
        },
        "payment_result": {
          "type": "integer",
          "enum": [
            2,
            1,
            0,
            -1,
            -2,
            -3
          ],
          "description": "Payment result:\n* 2: pending\n* 1: success\n* 0: card error\n* -1: unknown error\n* -2: payment service response time out\n* -3: for line pay, transaction cancel\n",
          "example": 1
        },
        "payment_card_type": {
          "type": "integer",
          "enum": [
            1,
            2,
            3,
            4,
            5,
            6
          ],
          "description": "card type\n* 1 = VISA\n* 2 = MasterCard\n* 3 = JCB\n* 4 = Union Pay\n* 5 = AMEX\n* 6 = Discovery Card\n"
        },
        "payment_line_pay_url": {
          "type": "string",
          "description": "For line pay, the client uses this url to complete payment.",
          "example": "https://line.pay/example/payment_url"
        },
        "payment_card_last_four_code": {
          "type": "string"
        },
        "membership_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Membership type:\n* 0: Normal user\n* 1: Corporate\n"
        },
        "plan_id": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Billing plan type:\n* 0: basic plan\n* 1: youth plan (user age < 24)\n"
        },
        "company": {
          "type": "string",
          "example": "gogoro",
          "description": "only appear when membership_type is corporate"
        },
        "allowance": {
          "type": "integer",
          "example": 0,
          "description": "only appear when membership_type is corporate"
        },
        "corporate_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n"
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "is_delay_apple_pay": {
          "type": "boolean"
        },
        "is_mission_achieved": {
          "type": "boolean"
        },
        "mission_state": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Mission State:\n  * 0: no mission in progress\n  * 1: mission in progress\n"
        },
        "mercury_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "mercury_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "* 0: VISA\n* 1: CTBC\n* 2: 聯名卡驚喜價\n",
          "example": 0
        },
        "subscription_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "battery_swap_count": {
          "type": "number",
          "format": "integer",
          "example": 2
        },
        "parking_lot_id": {
          "type": "string",
          "format": "uuid",
          "example": "7fc5fa0f-9d37-412b-92c8-238875b1621e"
        },
        "lbs_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "gov_addi_purchase_discount": {
          "type": "number",
          "format": "double",
          "example": 100
        },
        "plate": {
          "type": "string",
          "example": "MHK-7777"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "lat": {
          "type": "number",
          "example": 25.04926
        },
        "lng": {
          "type": "number",
          "example": 121.54562
        },
        "duration": {
          "type": "integer",
          "description": "When the state is riding or parking stage (state = 2 or 3), server will return the current accumulated rental duration (second(s)). Other states will NOT return the duration value.\n",
          "example": "1228 (20 mins and 28 secs)"
        },
        "find_scooter_pattern": {
          "$ref": "#/definitions/FindScooterPattern"
        },
        "action": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10
          ],
          "description": "* 0: cancel\n* 1: beep\n* 2: ride\n* 3: park\n* 4: open_trunk\n* 5: return\n* 8: find_scooter_by_horn\n* 9: in_parking\n* 10: out_parking\n"
        },
        "scooter_asset_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: default\n* 1: Xmas\n",
          "example": 1
        }
      }
    },
    "VM": {
      "type": "object",
      "properties": {
        "id": {
          "description": "VM ID",
          "type": "string",
          "format": "uuid"
        },
        "loc_name": {
          "description": "VM name",
          "type": "string",
          "example": "CPC Nanliao GS"
        },
        "address": {
          "description": "VM address",
          "type": "string",
          "example": "No. 292, Sec. 4, Dongda Rd., North Dist., Hsinchu City"
        },
        "lat": {
          "description": "VM GEO code with latitude",
          "type": "number",
          "format": "double",
          "example": 24.845864
        },
        "lng": {
          "description": "VM GEO code with longitude",
          "type": "number",
          "format": "double",
          "example": 120.927897
        }
      }
    },
    "Plan": {
      "type": "object",
      "properties": {
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode"
        },
        "plan_id": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Billing plan type:\n* 0: basic plan\n* 1: youth plan (user age < 24)\n"
        },
        "min_minutes": {
          "type": "integer",
          "description": "The basic billing time interval. With min_price=5 and min_minutes=20, for example, it means NT $5 for the frist 20 minutes."
        },
        "min_price": {
          "type": "number",
          "format": "double",
          "description": "The basic billing fee. With min_price=5 and min_minutes=20, for example, it means NT $5 for the frist 20 minutes."
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "The price for every minute after basic billing time. With min_price=5, min_minutes=20, and rate=2.0, for example, it means NT $5 for the frist 20 minutes, $2 per min afterwards ."
        },
        "expired_time": {
          "type": "number",
          "format": "long",
          "description": "The plan expired time. APP should force to refresh plans once the plan expired."
        },
        "service_id": {
          "type": "string",
          "format": "uuid"
        }
      },
      "example": {
        "scooter_model_code": 200,
        "plan_id": 0,
        "min_minutes": 5,
        "min_price": 2,
        "rate": 2,
        "expired_time": 33076742400000,
        "service_id": "1dedd133-efa6-4368-80c5-cfc5fa7c845a"
      }
    },
    "PlanCursorResult": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/CursorResult"
        },
        {
          "type": "object",
          "properties": {
            "data": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Plan"
              }
            }
          }
        }
      ]
    },
    "DynamicPromotionMessage": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique id for promotion message"
          },
          "short_description": {
            "type": "string",
            "description": "Short description promotion message"
          },
          "description": {
            "type": "string",
            "description": "Full description promotion message"
          },
          "payment_method": {
            "type": "integer",
            "enum": [
              1,
              2
            ],
            "description": "specify payment method\n* 1: line pay\n* 2: apple pay\n"
          },
          "pop_up_priority": {
            "type": "integer",
            "description": "promotion message display order"
          },
          "img_download_url": {
            "type": "string"
          }
        },
        "example": {
          "id": "line_pay_001",
          "short_description": "Line-pay 10% off",
          "description": "We have line pay 10% off. Change payment method to line-pay!",
          "payment_method": 1,
          "pop_up_priority": 0,
          "img_download_url": "https://goshare-app-asset-dev.s3.ap-southeast-1.amazonaws.com/promotion_messages/LinePay.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200522T055204Z&X-Amz-SignedHeaders=host&X-Amz-Expires=599&X-Amz-Credential=AKIAUTAWMV5XFGMJNY2F%2F20200522%2Fap-southeast-1%2Fs3%2Faws4_request&X-Amz-Signature=0c25f17885b54cdbc75cdd4ee16ff91ed3d7718f81085c87387cadecfb9f6491"
        }
      }
    },
    "PromotionLinePay": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id for linepay promotion"
        },
        "short_description": {
          "type": "string",
          "description": "Short description for linepay promotion"
        },
        "description": {
          "type": "string",
          "description": "Full description for linepay promotion"
        }
      },
      "example": {
        "id": "line_pay_001",
        "short_description": "Line-pay 10% off",
        "description": "We have line pay 10% off. Change payment method to line-pay!"
      }
    },
    "EventAnimations": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id for Event Animations"
        },
        "event_url": {
          "type": "string",
          "description": "Event animations resource"
        },
        "expired_time": {
          "type": "integer"
        }
      },
      "example": {
        "id": "001",
        "event_url": "https://goshare-app-asset-dev.s3-ap-southeast-1.amazonaws.com/GoShare_holiday_animation_test.zip",
        "expired_time": 1577808000000
      }
    },
    "EventAnimationsSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id for Event Animations"
        },
        "expired_time": {
          "type": "integer"
        }
      },
      "example": {
        "id": "001",
        "expired_time": 1577808000000
      }
    },
    "EventAnimationsFileLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique id for Event Animations"
        },
        "event_url": {
          "type": "string",
          "description": "Event animations resource"
        }
      },
      "example": {
        "id": "001",
        "event_url": "https://goshare-app-asset-dev.s3-ap-southeast-1.amazonaws.com/GoShare_holiday_animation_test.zip"
      }
    },
    "RentalReturnPhoto": {
      "type": "object",
      "properties": {
        "rental_id": {
          "type": "string",
          "format": "uuid",
          "description": "rental id",
          "example": "b5597020-ee38-4c8a-a823-c2b27262e057"
        },
        "photo_upload_url": {
          "type": "string",
          "description": "photo s3 photo upload presigned url",
          "example": "https://goshare-mobile-rental-photo-innov.s3.ap-southeast-1.amazonaws.com/d64a763b-d60e-4fb5-a005-a61e52d207f7.jpeg?Content-Type=image%2Fjpeg&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200729T065212Z&X-Amz-SignedHeaders=content-type%3Bhost&X-Amz-Expires=599&X-Amz-Credential=AKIAUTAWMV5XP5RMOF5W%2F20200729%2Fap-southeast-1%2Fs3%2Faws4_request&X-Amz-Signature=62b625cb0c56b44a6741b3f27c38b4278b10ae061af7f7208dda35f4bb5f6366"
        }
      }
    },
    "RentalPhoto": {
      "type": "object",
      "properties": {
        "rental_id": {
          "type": "string",
          "format": "uuid",
          "description": "rental id",
          "example": "b5597020-ee38-4c8a-a823-c2b27262e057"
        },
        "photo_url": {
          "type": "string",
          "description": "photo s3 photo presigned url",
          "example": "https://goshare-mobile-rental-photo.s3.ap-southeast-1.amazonaws.com/cbb6ed10-b893-4811-8ff6-a3e6cfaeadf0.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20200522T055204Z&X-Amz-SignedHeaders=host&X-Amz-Expires=599&X-Amz-Credential=AKIAUTAWMV5XFGMJNY2F%2F20200522%2Fap-southeast-1%2Fs3%2Faws4_request&X-Amz-Signature=0c25f17885b54cdbc75cdd4ee16ff91ed3d7718f81085c87387cadecfb9f6491"
        }
      }
    },
    "CombinedResource_1": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "object",
          "properties": {
            "rule": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ],
              "description": "The action rule for app to update::\n* 0: no-need\n* 1: suggest-to\n* 2: have-to\n"
            }
          }
        },
        "announcements": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Announcement messages ",
              "example": "颱風天所有服務關閉中"
            }
          }
        },
        "ads_banners": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdBanner"
                  }
                }
              }
            }
          ]
        },
        "countries": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Country"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "CombinedResourceV2_1": {
      "type": "object",
      "properties": {
        "reward_promotion": {
          "type": "object",
          "properties": {
            "is_enable": {
              "type": "boolean"
            }
          }
        },
        "trip_bonus_event": {
          "type": "object",
          "properties": {
            "is_enable": {
              "type": "boolean"
            },
            "is_cube_enable": {
              "type": "boolean"
            }
          }
        },
        "updates": {
          "type": "object",
          "properties": {
            "rule": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ],
              "description": "The action rule for app to update::\n* 0: no-need\n* 1: suggest-to\n* 2: have-to\n"
            }
          }
        },
        "announcements": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Announcement messages ",
              "example": "颱風天所有服務關閉中"
            }
          }
        },
        "ads_banners": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdBanner"
                  }
                }
              }
            }
          ]
        },
        "countries": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Country"
                  }
                }
              }
            }
          ]
        },
        "temporary_no_park_info": {
          "properties": {
            "message": {
              "type": "string",
              "description": "Park warning message"
            },
            "info_url": {
              "type": "string",
              "description": "Park warning more info url"
            },
            "expired_time": {
              "type": "number",
              "format": "long"
            }
          }
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "format": "uuid"
              },
              "data_size": {
                "type": "integer",
                "example": 1
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Zone"
                }
              }
            }
          }
        },
        "plans": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plan"
                  }
                }
              }
            }
          ]
        },
        "event_setting": {
          "$ref": "#/definitions/EventAnimationsSetting"
        },
        "parking_lot": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ParkingLot"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "Updates": {
      "type": "object",
      "properties": {
        "rule": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "The action rule for app to update::\n* 0: no-need\n* 1: suggest-to\n* 2: have-to\n"
        }
      }
    },
    "Messages": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "Announcement messages will be here."
        }
      }
    },
    "FcmInfo": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string",
          "example": "cjHPKvRtg0Uglz-l4UqOcv:APA91bHghoFH-TYFK8XdcK5alzDn2a5IcMvA88TC4AXHmcc2oNadV1Gbvi8pY46IKOvzX9w2-c2fsXQHFvMgZxM8SgyrZDr7Z1UOifBXM7yUXEBbSbrUt9UegTaLHCj8X6x54skbMPEE"
        },
        "client_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "* 0: ios\n* 1: android\n",
          "example": 0
        }
      }
    },
    "OverseaCombinedResource": {
      "type": "object",
      "properties": {
        "updates": {
          "type": "object",
          "properties": {
            "rule": {
              "type": "integer",
              "enum": [
                0,
                1,
                2
              ],
              "description": "The action rule for app to update::\n* 0: no-need\n* 1: suggest-to\n* 2: have-to\n"
            }
          }
        },
        "ads_banners": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/AdBanner"
                  }
                }
              }
            }
          ]
        },
        "countries": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Country"
                  }
                }
              }
            }
          ]
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "city": {
                "type": "string",
                "format": "uuid"
              },
              "data_size": {
                "type": "integer",
                "example": 1
              },
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Zone"
                }
              }
            }
          }
        },
        "plans": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/CursorResult"
            },
            {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Plan"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "OverseaRentalInfo": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The rental ID",
          "type": "string",
          "format": "uuid"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "plate": {
          "type": "string",
          "example": "MHK-7777"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "lat": {
          "type": "number",
          "example": 25.04926
        },
        "lng": {
          "type": "number",
          "example": 121.54562
        },
        "state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "description": "Current rental state:\n* 0: end\n* 1: reserving\n* 2: riding\n* 3: parking\n* 4: cancel\n"
        },
        "soc_level": {
          "type": "integer",
          "example": 5
        },
        "remaining_mileage": {
          "description": "Current estimated remaining mileage (km)",
          "type": "number",
          "format": "double",
          "example": 38
        },
        "countdown": {
          "type": "integer",
          "description": "Only for the state is reserving stage (state = 1), server will return the remaining countdown time for the countdown (second(s)). Other states will NOT return the countdown value.\n",
          "example": "580 (580 seconds = 9 mins and 40 secs)"
        },
        "duration": {
          "type": "integer",
          "description": "When the state is riding or parking stage (state = 2 or 3), server will return the current accumulated rental duration (second(s)). Other states will NOT return the duration value.\n",
          "example": "1228 (20 mins and 28 secs)"
        },
        "service_id": {
          "type": "string",
          "format": "uuid",
          "example": "a0e866ee-141a-449a-b3bd-3324583212d1"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "corporate_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n",
          "example": 0
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "find_scooter_pattern": {
          "$ref": "#/definitions/FindScooterPattern"
        },
        "is_user_birthday": {
          "description": "If rental state not in reservation this value will be always false",
          "type": "boolean",
          "example": false
        }
      }
    },
    "OverseaRentalReservation": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The rental ID",
          "type": "string",
          "format": "uuid"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "integer",
          "description": "The rental state will be “reserving” and no other return values for this request API at internal betastage.\n1: reserving\n// invalid values\n0: end\n2: riding\n3: parking\n4: cancel\n"
        },
        "plate": {
          "type": "string",
          "description": "The license plate of scooter"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "soc_level": {
          "type": "integer",
          "description": "Current battery energy level of the scooter"
        },
        "remaining_mileage": {
          "type": "number",
          "format": "double",
          "description": "Current estimated remaining mileage (km)"
        },
        "countdown": {
          "type": "integer",
          "description": "API will return the remaining countdown time for the countdown (second(s)) and only for the state is “reserving” stage (state = 1) at the internal beta stage. // other states will not return this value.\n"
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum",
          "format": "uuid"
        },
        "find_scooter_pattern": {
          "$ref": "#/definitions/FindScooterPattern"
        },
        "is_user_birthday": {
          "type": "boolean"
        }
      },
      "example": {
        "id": "eb8cd6e0-95b4-4f20-95ec-8caaa6008554",
        "scooter_id": "123e4567-e89b-12d3-a456-426655440000",
        "state": 1,
        "plate": "GOO-9969",
        "scooter_model_code": 100,
        "soc_level": 5,
        "remaining_mileage": 72,
        "countdown": "899 //(899 seconds = 14 mins and 59 secs)",
        "scooter_color_code": 0,
        "service_type": 0,
        "find_scooter_pattern": 0,
        "is_user_birthday": false
      }
    },
    "OverseaRental": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The rental ID",
          "type": "string",
          "format": "uuid"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "state": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4
          ],
          "description": "Current rental state:\n* 0: end\n* 1: reserving\n* 2: riding\n* 3: parking\n* 4: cancel\n"
        },
        "soc_level": {
          "type": "integer",
          "example": 5
        },
        "remaining_mileage": {
          "description": "Current estimated remaining mileage (km)",
          "type": "number",
          "format": "double",
          "example": 38
        },
        "trip_start_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when starting the rental",
          "example": 1552609616000
        },
        "trip_end_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when finishing the rental",
          "example": 1552613216000
        },
        "trip_start_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where starting the rental",
          "example": 0
        },
        "trip_start_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where starting the rental",
          "example": 0
        },
        "trip_end_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where finishing the rental",
          "example": 90
        },
        "trip_end_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where finishing the rental",
          "example": 90
        },
        "distance": {
          "description": "Riding distance (km)",
          "type": "number",
          "format": "double",
          "example": 36
        },
        "price": {
          "description": "The price (subtotal - discount) which the user would pay when finishing the rental",
          "type": "number",
          "format": "double",
          "example": 87
        },
        "subtotal": {
          "description": "The subtotal based on current plan to calculate",
          "type": "number",
          "format": "double",
          "example": 100
        },
        "currency": {
          "description": "The currency of price",
          "type": "string",
          "example": "TWD"
        },
        "membership_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Membership type:\n* 0: Normal user\n* 1: Corporate\n"
        },
        "plan_id": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Billing plan type:\n* 0: basic plan\n* 1: youth plan (user age < 24)\n"
        },
        "company": {
          "type": "string",
          "example": "gogoro",
          "description": "only appear when membership_type is corporate"
        },
        "allowance": {
          "type": "integer",
          "example": 0,
          "description": "only appear when membership_type is corporate"
        },
        "corporate_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n"
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        },
        "battery_swap_count": {
          "type": "number",
          "format": "integer",
          "example": 2
        },
        "plate": {
          "type": "string",
          "example": "MHK-7777"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "lat": {
          "type": "number",
          "example": 25.04926
        },
        "lng": {
          "type": "number",
          "example": 121.54562
        },
        "duration": {
          "type": "integer",
          "description": "When the state is riding or parking stage (state = 2 or 3), server will return the current accumulated rental duration (second(s)). Other states will NOT return the duration value.\n",
          "example": "1228 (20 mins and 28 secs)"
        },
        "find_scooter_pattern": {
          "$ref": "#/definitions/FindScooterPattern"
        },
        "action": {
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3,
            4,
            5,
            8,
            9,
            10
          ],
          "description": "* 0: cancel\n* 1: beep\n* 2: ride\n* 3: park\n* 4: open_trunk\n* 5: return\n* 8: find_scooter_by_horn\n* 9: in_parking\n* 10: out_parking\n"
        }
      }
    },
    "OverseaRentalHistoryDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid",
          "description": "The rental ID"
        },
        "scooter_id": {
          "description": "The scooter ID",
          "type": "string",
          "format": "uuid"
        },
        "plate": {
          "description": "The scooter plate",
          "type": "string",
          "example": "MYF-2007"
        },
        "scooter_model_code": {
          "$ref": "#/definitions/ScooterModelCode",
          "example": 100
        },
        "trip_start_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when starting the rental",
          "example": 1552609616000
        },
        "trip_end_time": {
          "type": "number",
          "format": "long",
          "description": "The UNIX timestamp when finishing the rental",
          "example": 1552613216000
        },
        "trip_start_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where starting the rental",
          "example": 0
        },
        "trip_start_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where starting the rental",
          "example": 0
        },
        "trip_end_lng": {
          "type": "number",
          "format": "double",
          "description": "The longtitude where finishing the rental",
          "example": 90
        },
        "trip_end_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude where finishing the rental",
          "example": 90
        },
        "distance": {
          "type": "number",
          "format": "double",
          "example": 11.1,
          "description": "Riding distance (km)"
        },
        "currency": {
          "type": "string",
          "example": "TWD",
          "description": "The currency of price"
        },
        "price": {
          "description": "The price (subtotal - discount) which the user would pay when finishing the rental",
          "type": "number",
          "format": "double",
          "example": 87
        },
        "subtotal": {
          "description": "The subtotal based on plan to calculate",
          "type": "number",
          "format": "double",
          "example": 100
        },
        "plan_id": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Billing plan type:\n* 0: basic plan\n* 1: youth plan (user age < 24)\n"
        },
        "membership_type": {
          "type": "integer",
          "enum": [
            0,
            1
          ],
          "description": "Membership type:\n* 0: Normal user\n* 1: Corporate\n"
        },
        "company": {
          "type": "string",
          "example": "gogoro"
        },
        "corporate_type": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Corporate type:\n* 0: None\n* 1: Basic\n* 2: VIP\n",
          "example": 0
        },
        "scooter_color_code": {
          "$ref": "#/definitions/ScooterColorCodeEnum"
        },
        "service_type": {
          "$ref": "#/definitions/ServiceTypeEnum"
        }
      }
    },
    "OverseaUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "company": {
          "type": "string"
        },
        "company_lat": {
          "type": "number",
          "format": "double",
          "description": "The latitude of the company",
          "example": -6.2438135008601074
        },
        "company_lng": {
          "type": "number",
          "format": "double",
          "description": "The longitude of the company",
          "example": 106.80291113663476
        }
      }
    },
    "OverseaBusinessInfo": {
      "type": "object",
      "properties": {
        "company": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "is_vip": {
          "type": "boolean"
        },
        "is_basic": {
          "type": "boolean"
        },
        "vip_valid_from": {
          "type": "number",
          "format": "long"
        },
        "vip_valid_to": {
          "type": "number",
          "format": "long"
        }
      },
      "example": {
        "company": "gogoro",
        "email": "user@gogoro.com",
        "is_vip": true,
        "is_basic": false,
        "vip_valid_from": 1588204800000,
        "vip_valid_to": 1588204800000
      }
    },
    "RewardPromotion": {
      "type": "object",
      "properties": {
        "pocket_associated": {
          "type": "boolean"
        },
        "bind_co_brand_card": {
          "type": "boolean"
        }
      },
      "example": {
        "pocket_associated": true,
        "bind_co_brand_card": true
      }
    }
  },
  "schemes": [
    "https",
    "http"
  ],
  "host": "localhost:8080",
  "basePath": "/v2"
}